#!/bin/bash

# Script de Deploy para EasyPanel
# Webhook Gonnect CRM

set -e

echo "üöÄ Iniciando deploy do Webhook Gonnect CRM..."

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log colorido
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}"
}

info() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] INFO: $1${NC}"
}

# Verificar se estamos no diret√≥rio correto
if [ ! -f "package.json" ]; then
    error "Execute este script no diret√≥rio raiz do projeto"
    exit 1
fi

# Verificar depend√™ncias
log "Verificando depend√™ncias..."
if ! command -v docker &> /dev/null; then
    error "Docker n√£o est√° instalado"
    exit 1
fi

if ! command -v docker-compose &> /dev/null; then
    error "Docker Compose n√£o est√° instalado"
    exit 1
fi

# Verificar se o arquivo .env existe
if [ ! -f ".env" ]; then
    warn "Arquivo .env n√£o encontrado. Criando template..."
    cat > .env << EOF
NODE_ENV=production
PORT=3000
MONGODB_URI=mongodb://mongo:L3afarodnil@109.199.117.251:27017/webhook_gonnect?tls=false&authSource=admin
EOF
    log "Arquivo .env criado com configura√ß√µes padr√£o"
fi

# Testar build local
log "Testando build local..."
docker build -t webhook-gonnect-test .

# Testar conectividade com MongoDB
log "Testando conectividade com MongoDB..."
if docker run --rm webhook-gonnect-test node -e "
const mongoose = require('mongoose');
const uri = process.env.MONGODB_URI || 'mongodb://mongo:L3afarodnil@109.199.117.251:27017/webhook_gonnect?tls=false&authSource=admin';
mongoose.connect(uri, { serverSelectionTimeoutMS: 5000 })
  .then(() => { console.log('‚úÖ MongoDB conectado com sucesso'); process.exit(0); })
  .catch(err => { console.error('‚ùå Erro ao conectar MongoDB:', err.message); process.exit(1); });
"; then
    log "‚úÖ Conectividade com MongoDB OK"
else
    error "‚ùå Falha na conectividade com MongoDB"
    exit 1
fi

# Criar diret√≥rio de logs se n√£o existir
mkdir -p Logs

# Build da imagem de produ√ß√£o
log "Fazendo build da imagem de produ√ß√£o..."
docker build -t webhook-gonnect:latest .

# Parar containers existentes
log "Parando containers existentes..."
docker-compose down || true

# Iniciar servi√ßos
log "Iniciando servi√ßos..."
docker-compose up -d

# Aguardar inicializa√ß√£o
log "Aguardando inicializa√ß√£o da aplica√ß√£o..."
sleep 10

# Verificar health check
log "Verificando health check..."
for i in {1..30}; do
    if curl -f http://localhost:3000/health > /dev/null 2>&1; then
        log "‚úÖ Aplica√ß√£o est√° respondendo"
        break
    fi
    
    if [ $i -eq 30 ]; then
        error "‚ùå Aplica√ß√£o n√£o est√° respondendo ap√≥s 30 tentativas"
        docker-compose logs
        exit 1
    fi
    
    warn "Tentativa $i/30 - Aguardando..."
    sleep 2
done

# Testar endpoints
log "Testando endpoints..."

# Teste do endpoint principal
if curl -s http://localhost:3000/ | grep -q "Gonnect CRM Webhook API"; then
    log "‚úÖ Endpoint principal OK"
else
    error "‚ùå Endpoint principal falhou"
fi

# Teste do endpoint de health
if curl -s http://localhost:3000/health | grep -q "ok"; then
    log "‚úÖ Endpoint health OK"
else
    error "‚ùå Endpoint health falhou"
fi

# Teste da documenta√ß√£o
if curl -s http://localhost:3000/api-docs > /dev/null; then
    log "‚úÖ Documenta√ß√£o acess√≠vel"
else
    warn "‚ö†Ô∏è Documenta√ß√£o n√£o acess√≠vel"
fi

# Mostrar informa√ß√µes finais
log "üéâ Deploy conclu√≠do com sucesso!"
echo ""
echo "üìä Informa√ß√µes do Deploy:"
echo "   URL Local: http://localhost:3000"
echo "   Health Check: http://localhost:3000/health"
echo "   Documenta√ß√£o: http://localhost:3000/api-docs"
echo "   Webhook: http://localhost:3000/webhook"
echo ""
echo "üìã Comandos √∫teis:"
echo "   Ver logs: docker-compose logs -f"
echo "   Parar: docker-compose down"
echo "   Reiniciar: docker-compose restart"
echo ""

# Verificar se h√° logs de erro
if docker-compose logs --tail=50 | grep -i error; then
    warn "‚ö†Ô∏è Encontrados erros nos logs. Verifique com: docker-compose logs"
fi

log "‚úÖ Deploy finalizado!" 